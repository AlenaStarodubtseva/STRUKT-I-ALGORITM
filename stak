public class MyStack<T> {
    private Node<T> top;
    private int size;

    // Внутренний класс для представления узла стека
    private static class Node<T> {
        private T data;
        private Node<T> next;

        public Node(T data) {
            this.data = data;
        }
    }

    // Конструктор
    public MyStack() {
        this.top = null;
        this.size = 0;
    }

    // Метод для добавления элемента в стек
    public void push(T data) {
        Node<T> newNode = new Node<>(data);
        newNode.next = top;
        top = newNode;
        size++;
    }

    // Метод для удаления верхнего элемента из стека
    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        T data = top.data;
        top = top.next;
        size--;
        return data;
    }

    // Метод для просмотра верхнего элемента стека без удаления
    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty");
        }
        return top.data;
    }

    // Метод для проверки, пуст ли стек
    public boolean isEmpty() {
        return top == null;
    }

    // Метод для получения размера стека
    public int size() {
        return size;
    }

    // Основной метод для тестирования стека
    public static void main(String[] args) {
        MyStack<Integer> stack = new MyStack<>();

        // Добавляем элементы в стек
        stack.push(10);
        stack.push(20);
        stack.push(30);

        // Проверяем верхний элемент стека
        System.out.println("Top element is: " + stack.peek());

        // Удаляем элементы из стека
        System.out.println("Popped element is: " + stack.pop());
        System.out.println("Popped element is: " + stack.pop());

        // Проверяем, пуст ли стек
        System.out.println("Is stack empty? " + stack.isEmpty());

        /
